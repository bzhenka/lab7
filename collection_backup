package server;

import enums.MovieGenre;
import enums.MpaaRating;
import models.Coordinates;
import models.Movie;
import models.Person;
import server.exceptions.WrongArgumentException;

import java.time.ZonedDateTime;
import java.util.*;
import java.util.stream.Collectors;

public class MovieCollection {
    private ArrayDeque<Movie> movieArrayDeque = new ArrayDeque<>();
    private ZonedDateTime initializationDate;



    public MovieCollection() {
        initializationDate = ZonedDateTime.now();
    }

    public ArrayDeque<Movie> getMovieArrayDeque() {
        return movieArrayDeque;
    }

    public void add(Movie movie) {
        movieArrayDeque.addLast(movie);
    }

    public Movie remove_head() throws WrongArgumentException {
        try {
            Optional<Movie> optionalMovie = movieArrayDeque.stream().
                    findFirst();
            Movie firstMovie = optionalMovie.orElse(null);

            ArrayDeque<Movie> newCollection = movieArrayDeque.stream().
                    skip(1).
                    collect(ArrayDeque::new, ArrayDeque::add, ArrayDeque::addAll);
            movieArrayDeque = newCollection.clone();

            return firstMovie;
        } catch (NoSuchElementException e) {
            throw new WrongArgumentException("Коллекция пуста");
        }
    }

    public void removeLastMovie() {
        ArrayDeque<Movie> newCollection = movieArrayDeque.stream().
                limit(movieArrayDeque.size() - 1).
                collect(ArrayDeque::new, ArrayDeque::add, ArrayDeque::addAll);
        movieArrayDeque = newCollection.clone();
    }

    // получение количества фильмов в коллекции
    public int getSize() {
        return (int) movieArrayDeque.stream().
                count();
    }
    public void remove_first() throws WrongArgumentException {
        try {
            ArrayDeque<Movie> newCollection = movieArrayDeque.stream().
                    skip(1).
                    collect(ArrayDeque::new, ArrayDeque::add, ArrayDeque::addAll);
            movieArrayDeque = newCollection.clone();
        } catch (NoSuchElementException e) {
            throw new WrongArgumentException("Коллекция пуста");
        }
    }

    public void clear() {
        movieArrayDeque.clear();
    }

    public Movie head() {
        Optional<Movie> optionalMovie = movieArrayDeque.stream().
                findFirst();
        return optionalMovie.orElse(null);
    }

    public boolean remove_by_id(int id) {
        boolean success = movieArrayDeque.removeIf(movie -> movie.getId() == id);
        return success;
    }

    public Movie get_by_id(int id) {
        Optional<Movie> foundMovie = movieArrayDeque.stream()
                .filter(movie -> movie.getId() == id)
                .findFirst();
        return foundMovie.orElse(null);
    }

    public int count_less_than_operator(Person operator) {
        int count = (int) movieArrayDeque.stream().
                filter((Movie movie) -> (movie.getOperator().compareTo(operator) < 0)).
                count();
        return count;
    }

    public ArrayList<Movie> filter_contains_name(String name) {
        ArrayList<Movie> movies = movieArrayDeque.stream().
                filter((Movie movie) -> (movie.getName().contains(name))).
                collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
        return movies;
    }

    public void updateMovie(int id, String name, Coordinates coordinates, Long oscarsCount, MovieGenre genre, MpaaRating mpaaRating, Person operator) {

        ArrayDeque<Movie> newMovies = movieArrayDeque.stream()
                .filter(movie -> movie.getId() == id)
                .peek((Movie movie) -> {
                    movie.setName(name);
                    movie.setCoordinates(coordinates);
                    movie.setOscarsCount(oscarsCount);
                    movie.setGenre(genre);
                    movie.setMpaaRating(mpaaRating);
                    movie.setOperator(operator);
                }).collect(ArrayDeque::new, ArrayDeque::add, ArrayDeque::addAll);;

        movieArrayDeque = newMovies.clone();
    }
    public ArrayDeque<Movie> filter_less_than_oscars_count(Long oscarsCount){
        ArrayDeque<Movie> movies = movieArrayDeque.stream().
                filter((Movie movie) -> (movie.getOscarsCount().compareTo(oscarsCount) < 0)).
                collect(ArrayDeque::new, ArrayDeque::add, ArrayDeque::addAll);
        return movies;
    }
    public ZonedDateTime getInitializationDate() {
        return initializationDate;
    }

    public void setInitializationDate(ZonedDateTime initializationDate) {
        this.initializationDate = initializationDate;
    }
}

